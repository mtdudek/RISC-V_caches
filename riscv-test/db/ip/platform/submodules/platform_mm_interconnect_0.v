// platform_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.1 670

`timescale 1 ps / 1 ps
module platform_mm_interconnect_0 (
		input  wire        sys_sdram_pll_sys_clk_clk,                             //                           sys_sdram_pll_sys_clk.clk
		input  wire        Instruction_Cache_0_reset_reset_bridge_in_reset_reset, // Instruction_Cache_0_reset_reset_bridge_in_reset.reset
		input  wire        jtag_master_clk_reset_reset_bridge_in_reset_reset,     //     jtag_master_clk_reset_reset_bridge_in_reset.reset
		input  wire        riscv_simple_sv_0_reset_reset_bridge_in_reset_reset,   //   riscv_simple_sv_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0] Instruction_Cache_0_memory_address,                    //                      Instruction_Cache_0_memory.address
		output wire        Instruction_Cache_0_memory_waitrequest,                //                                                .waitrequest
		input  wire [3:0]  Instruction_Cache_0_memory_burstcount,                 //                                                .burstcount
		input  wire        Instruction_Cache_0_memory_read,                       //                                                .read
		output wire [63:0] Instruction_Cache_0_memory_readdata,                   //                                                .readdata
		output wire        Instruction_Cache_0_memory_readdatavalid,              //                                                .readdatavalid
		input  wire [31:0] jtag_master_master_address,                            //                              jtag_master_master.address
		output wire        jtag_master_master_waitrequest,                        //                                                .waitrequest
		input  wire [3:0]  jtag_master_master_byteenable,                         //                                                .byteenable
		input  wire        jtag_master_master_read,                               //                                                .read
		output wire [31:0] jtag_master_master_readdata,                           //                                                .readdata
		output wire        jtag_master_master_readdatavalid,                      //                                                .readdatavalid
		input  wire        jtag_master_master_write,                              //                                                .write
		input  wire [31:0] jtag_master_master_writedata,                          //                                                .writedata
		input  wire [31:0] riscv_simple_sv_0_data_master_address,                 //                   riscv_simple_sv_0_data_master.address
		output wire        riscv_simple_sv_0_data_master_waitrequest,             //                                                .waitrequest
		input  wire [3:0]  riscv_simple_sv_0_data_master_byteenable,              //                                                .byteenable
		input  wire        riscv_simple_sv_0_data_master_read,                    //                                                .read
		output wire [31:0] riscv_simple_sv_0_data_master_readdata,                //                                                .readdata
		output wire        riscv_simple_sv_0_data_master_readdatavalid,           //                                                .readdatavalid
		input  wire        riscv_simple_sv_0_data_master_write,                   //                                                .write
		input  wire [31:0] riscv_simple_sv_0_data_master_writedata,               //                                                .writedata
		output wire [1:0]  ledr_s1_address,                                       //                                         ledr_s1.address
		output wire        ledr_s1_write,                                         //                                                .write
		input  wire [31:0] ledr_s1_readdata,                                      //                                                .readdata
		output wire [31:0] ledr_s1_writedata,                                     //                                                .writedata
		output wire        ledr_s1_chipselect,                                    //                                                .chipselect
		output wire [14:0] riscv_data_s1_address,                                 //                                   riscv_data_s1.address
		output wire        riscv_data_s1_write,                                   //                                                .write
		input  wire [31:0] riscv_data_s1_readdata,                                //                                                .readdata
		output wire [31:0] riscv_data_s1_writedata,                               //                                                .writedata
		output wire [3:0]  riscv_data_s1_byteenable,                              //                                                .byteenable
		output wire        riscv_data_s1_chipselect,                              //                                                .chipselect
		output wire        riscv_data_s1_clken,                                   //                                                .clken
		output wire [24:0] riscv_sdram_s1_address,                                //                                  riscv_sdram_s1.address
		output wire        riscv_sdram_s1_write,                                  //                                                .write
		output wire        riscv_sdram_s1_read,                                   //                                                .read
		input  wire [15:0] riscv_sdram_s1_readdata,                               //                                                .readdata
		output wire [15:0] riscv_sdram_s1_writedata,                              //                                                .writedata
		output wire [1:0]  riscv_sdram_s1_byteenable,                             //                                                .byteenable
		input  wire        riscv_sdram_s1_readdatavalid,                          //                                                .readdatavalid
		input  wire        riscv_sdram_s1_waitrequest,                            //                                                .waitrequest
		output wire        riscv_sdram_s1_chipselect,                             //                                                .chipselect
		output wire [13:0] riscv_text_s1_address,                                 //                                   riscv_text_s1.address
		output wire        riscv_text_s1_write,                                   //                                                .write
		input  wire [31:0] riscv_text_s1_readdata,                                //                                                .readdata
		output wire [31:0] riscv_text_s1_writedata,                               //                                                .writedata
		output wire [3:0]  riscv_text_s1_byteenable,                              //                                                .byteenable
		output wire        riscv_text_s1_chipselect,                              //                                                .chipselect
		output wire        riscv_text_s1_clken,                                   //                                                .clken
		output wire [1:0]  sw_s1_address,                                         //                                           sw_s1.address
		input  wire [31:0] sw_s1_readdata                                         //                                                .readdata
	);

	wire          riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_waitrequest;      // riscv_simple_sv_0_data_master_agent:av_waitrequest -> riscv_simple_sv_0_data_master_translator:uav_waitrequest
	wire   [31:0] riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_readdata;         // riscv_simple_sv_0_data_master_agent:av_readdata -> riscv_simple_sv_0_data_master_translator:uav_readdata
	wire          riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_debugaccess;      // riscv_simple_sv_0_data_master_translator:uav_debugaccess -> riscv_simple_sv_0_data_master_agent:av_debugaccess
	wire   [31:0] riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_address;          // riscv_simple_sv_0_data_master_translator:uav_address -> riscv_simple_sv_0_data_master_agent:av_address
	wire          riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_read;             // riscv_simple_sv_0_data_master_translator:uav_read -> riscv_simple_sv_0_data_master_agent:av_read
	wire    [3:0] riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_byteenable;       // riscv_simple_sv_0_data_master_translator:uav_byteenable -> riscv_simple_sv_0_data_master_agent:av_byteenable
	wire          riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_readdatavalid;    // riscv_simple_sv_0_data_master_agent:av_readdatavalid -> riscv_simple_sv_0_data_master_translator:uav_readdatavalid
	wire          riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_lock;             // riscv_simple_sv_0_data_master_translator:uav_lock -> riscv_simple_sv_0_data_master_agent:av_lock
	wire          riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_write;            // riscv_simple_sv_0_data_master_translator:uav_write -> riscv_simple_sv_0_data_master_agent:av_write
	wire   [31:0] riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_writedata;        // riscv_simple_sv_0_data_master_translator:uav_writedata -> riscv_simple_sv_0_data_master_agent:av_writedata
	wire    [2:0] riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_burstcount;       // riscv_simple_sv_0_data_master_translator:uav_burstcount -> riscv_simple_sv_0_data_master_agent:av_burstcount
	wire          jtag_master_master_translator_avalon_universal_master_0_waitrequest;                 // jtag_master_master_agent:av_waitrequest -> jtag_master_master_translator:uav_waitrequest
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_readdata;                    // jtag_master_master_agent:av_readdata -> jtag_master_master_translator:uav_readdata
	wire          jtag_master_master_translator_avalon_universal_master_0_debugaccess;                 // jtag_master_master_translator:uav_debugaccess -> jtag_master_master_agent:av_debugaccess
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_address;                     // jtag_master_master_translator:uav_address -> jtag_master_master_agent:av_address
	wire          jtag_master_master_translator_avalon_universal_master_0_read;                        // jtag_master_master_translator:uav_read -> jtag_master_master_agent:av_read
	wire    [3:0] jtag_master_master_translator_avalon_universal_master_0_byteenable;                  // jtag_master_master_translator:uav_byteenable -> jtag_master_master_agent:av_byteenable
	wire          jtag_master_master_translator_avalon_universal_master_0_readdatavalid;               // jtag_master_master_agent:av_readdatavalid -> jtag_master_master_translator:uav_readdatavalid
	wire          jtag_master_master_translator_avalon_universal_master_0_lock;                        // jtag_master_master_translator:uav_lock -> jtag_master_master_agent:av_lock
	wire          jtag_master_master_translator_avalon_universal_master_0_write;                       // jtag_master_master_translator:uav_write -> jtag_master_master_agent:av_write
	wire   [31:0] jtag_master_master_translator_avalon_universal_master_0_writedata;                   // jtag_master_master_translator:uav_writedata -> jtag_master_master_agent:av_writedata
	wire    [2:0] jtag_master_master_translator_avalon_universal_master_0_burstcount;                  // jtag_master_master_translator:uav_burstcount -> jtag_master_master_agent:av_burstcount
	wire          instruction_cache_0_memory_translator_avalon_universal_master_0_waitrequest;         // Instruction_Cache_0_memory_agent:av_waitrequest -> Instruction_Cache_0_memory_translator:uav_waitrequest
	wire   [63:0] instruction_cache_0_memory_translator_avalon_universal_master_0_readdata;            // Instruction_Cache_0_memory_agent:av_readdata -> Instruction_Cache_0_memory_translator:uav_readdata
	wire          instruction_cache_0_memory_translator_avalon_universal_master_0_debugaccess;         // Instruction_Cache_0_memory_translator:uav_debugaccess -> Instruction_Cache_0_memory_agent:av_debugaccess
	wire   [31:0] instruction_cache_0_memory_translator_avalon_universal_master_0_address;             // Instruction_Cache_0_memory_translator:uav_address -> Instruction_Cache_0_memory_agent:av_address
	wire          instruction_cache_0_memory_translator_avalon_universal_master_0_read;                // Instruction_Cache_0_memory_translator:uav_read -> Instruction_Cache_0_memory_agent:av_read
	wire    [7:0] instruction_cache_0_memory_translator_avalon_universal_master_0_byteenable;          // Instruction_Cache_0_memory_translator:uav_byteenable -> Instruction_Cache_0_memory_agent:av_byteenable
	wire          instruction_cache_0_memory_translator_avalon_universal_master_0_readdatavalid;       // Instruction_Cache_0_memory_agent:av_readdatavalid -> Instruction_Cache_0_memory_translator:uav_readdatavalid
	wire          instruction_cache_0_memory_translator_avalon_universal_master_0_lock;                // Instruction_Cache_0_memory_translator:uav_lock -> Instruction_Cache_0_memory_agent:av_lock
	wire          instruction_cache_0_memory_translator_avalon_universal_master_0_write;               // Instruction_Cache_0_memory_translator:uav_write -> Instruction_Cache_0_memory_agent:av_write
	wire   [63:0] instruction_cache_0_memory_translator_avalon_universal_master_0_writedata;           // Instruction_Cache_0_memory_translator:uav_writedata -> Instruction_Cache_0_memory_agent:av_writedata
	wire    [6:0] instruction_cache_0_memory_translator_avalon_universal_master_0_burstcount;          // Instruction_Cache_0_memory_translator:uav_burstcount -> Instruction_Cache_0_memory_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                               // rsp_mux_002:src_valid -> Instruction_Cache_0_memory_agent:rp_valid
	wire  [145:0] rsp_mux_002_src_data;                                                                // rsp_mux_002:src_data -> Instruction_Cache_0_memory_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                               // Instruction_Cache_0_memory_agent:rp_ready -> rsp_mux_002:src_ready
	wire    [4:0] rsp_mux_002_src_channel;                                                             // rsp_mux_002:src_channel -> Instruction_Cache_0_memory_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                       // rsp_mux_002:src_startofpacket -> Instruction_Cache_0_memory_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                         // rsp_mux_002:src_endofpacket -> Instruction_Cache_0_memory_agent:rp_endofpacket
	wire   [15:0] riscv_sdram_s1_agent_m0_readdata;                                                    // riscv_sdram_s1_translator:uav_readdata -> riscv_sdram_s1_agent:m0_readdata
	wire          riscv_sdram_s1_agent_m0_waitrequest;                                                 // riscv_sdram_s1_translator:uav_waitrequest -> riscv_sdram_s1_agent:m0_waitrequest
	wire          riscv_sdram_s1_agent_m0_debugaccess;                                                 // riscv_sdram_s1_agent:m0_debugaccess -> riscv_sdram_s1_translator:uav_debugaccess
	wire   [31:0] riscv_sdram_s1_agent_m0_address;                                                     // riscv_sdram_s1_agent:m0_address -> riscv_sdram_s1_translator:uav_address
	wire    [1:0] riscv_sdram_s1_agent_m0_byteenable;                                                  // riscv_sdram_s1_agent:m0_byteenable -> riscv_sdram_s1_translator:uav_byteenable
	wire          riscv_sdram_s1_agent_m0_read;                                                        // riscv_sdram_s1_agent:m0_read -> riscv_sdram_s1_translator:uav_read
	wire          riscv_sdram_s1_agent_m0_readdatavalid;                                               // riscv_sdram_s1_translator:uav_readdatavalid -> riscv_sdram_s1_agent:m0_readdatavalid
	wire          riscv_sdram_s1_agent_m0_lock;                                                        // riscv_sdram_s1_agent:m0_lock -> riscv_sdram_s1_translator:uav_lock
	wire   [15:0] riscv_sdram_s1_agent_m0_writedata;                                                   // riscv_sdram_s1_agent:m0_writedata -> riscv_sdram_s1_translator:uav_writedata
	wire          riscv_sdram_s1_agent_m0_write;                                                       // riscv_sdram_s1_agent:m0_write -> riscv_sdram_s1_translator:uav_write
	wire    [1:0] riscv_sdram_s1_agent_m0_burstcount;                                                  // riscv_sdram_s1_agent:m0_burstcount -> riscv_sdram_s1_translator:uav_burstcount
	wire          riscv_sdram_s1_agent_rf_source_valid;                                                // riscv_sdram_s1_agent:rf_source_valid -> riscv_sdram_s1_agent_rsp_fifo:in_valid
	wire   [92:0] riscv_sdram_s1_agent_rf_source_data;                                                 // riscv_sdram_s1_agent:rf_source_data -> riscv_sdram_s1_agent_rsp_fifo:in_data
	wire          riscv_sdram_s1_agent_rf_source_ready;                                                // riscv_sdram_s1_agent_rsp_fifo:in_ready -> riscv_sdram_s1_agent:rf_source_ready
	wire          riscv_sdram_s1_agent_rf_source_startofpacket;                                        // riscv_sdram_s1_agent:rf_source_startofpacket -> riscv_sdram_s1_agent_rsp_fifo:in_startofpacket
	wire          riscv_sdram_s1_agent_rf_source_endofpacket;                                          // riscv_sdram_s1_agent:rf_source_endofpacket -> riscv_sdram_s1_agent_rsp_fifo:in_endofpacket
	wire          riscv_sdram_s1_agent_rsp_fifo_out_valid;                                             // riscv_sdram_s1_agent_rsp_fifo:out_valid -> riscv_sdram_s1_agent:rf_sink_valid
	wire   [92:0] riscv_sdram_s1_agent_rsp_fifo_out_data;                                              // riscv_sdram_s1_agent_rsp_fifo:out_data -> riscv_sdram_s1_agent:rf_sink_data
	wire          riscv_sdram_s1_agent_rsp_fifo_out_ready;                                             // riscv_sdram_s1_agent:rf_sink_ready -> riscv_sdram_s1_agent_rsp_fifo:out_ready
	wire          riscv_sdram_s1_agent_rsp_fifo_out_startofpacket;                                     // riscv_sdram_s1_agent_rsp_fifo:out_startofpacket -> riscv_sdram_s1_agent:rf_sink_startofpacket
	wire          riscv_sdram_s1_agent_rsp_fifo_out_endofpacket;                                       // riscv_sdram_s1_agent_rsp_fifo:out_endofpacket -> riscv_sdram_s1_agent:rf_sink_endofpacket
	wire          riscv_sdram_s1_agent_rdata_fifo_src_valid;                                           // riscv_sdram_s1_agent:rdata_fifo_src_valid -> riscv_sdram_s1_agent_rdata_fifo:in_valid
	wire   [17:0] riscv_sdram_s1_agent_rdata_fifo_src_data;                                            // riscv_sdram_s1_agent:rdata_fifo_src_data -> riscv_sdram_s1_agent_rdata_fifo:in_data
	wire          riscv_sdram_s1_agent_rdata_fifo_src_ready;                                           // riscv_sdram_s1_agent_rdata_fifo:in_ready -> riscv_sdram_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ledr_s1_agent_m0_readdata;                                                           // ledr_s1_translator:uav_readdata -> ledr_s1_agent:m0_readdata
	wire          ledr_s1_agent_m0_waitrequest;                                                        // ledr_s1_translator:uav_waitrequest -> ledr_s1_agent:m0_waitrequest
	wire          ledr_s1_agent_m0_debugaccess;                                                        // ledr_s1_agent:m0_debugaccess -> ledr_s1_translator:uav_debugaccess
	wire   [31:0] ledr_s1_agent_m0_address;                                                            // ledr_s1_agent:m0_address -> ledr_s1_translator:uav_address
	wire    [3:0] ledr_s1_agent_m0_byteenable;                                                         // ledr_s1_agent:m0_byteenable -> ledr_s1_translator:uav_byteenable
	wire          ledr_s1_agent_m0_read;                                                               // ledr_s1_agent:m0_read -> ledr_s1_translator:uav_read
	wire          ledr_s1_agent_m0_readdatavalid;                                                      // ledr_s1_translator:uav_readdatavalid -> ledr_s1_agent:m0_readdatavalid
	wire          ledr_s1_agent_m0_lock;                                                               // ledr_s1_agent:m0_lock -> ledr_s1_translator:uav_lock
	wire   [31:0] ledr_s1_agent_m0_writedata;                                                          // ledr_s1_agent:m0_writedata -> ledr_s1_translator:uav_writedata
	wire          ledr_s1_agent_m0_write;                                                              // ledr_s1_agent:m0_write -> ledr_s1_translator:uav_write
	wire    [2:0] ledr_s1_agent_m0_burstcount;                                                         // ledr_s1_agent:m0_burstcount -> ledr_s1_translator:uav_burstcount
	wire          ledr_s1_agent_rf_source_valid;                                                       // ledr_s1_agent:rf_source_valid -> ledr_s1_agent_rsp_fifo:in_valid
	wire  [110:0] ledr_s1_agent_rf_source_data;                                                        // ledr_s1_agent:rf_source_data -> ledr_s1_agent_rsp_fifo:in_data
	wire          ledr_s1_agent_rf_source_ready;                                                       // ledr_s1_agent_rsp_fifo:in_ready -> ledr_s1_agent:rf_source_ready
	wire          ledr_s1_agent_rf_source_startofpacket;                                               // ledr_s1_agent:rf_source_startofpacket -> ledr_s1_agent_rsp_fifo:in_startofpacket
	wire          ledr_s1_agent_rf_source_endofpacket;                                                 // ledr_s1_agent:rf_source_endofpacket -> ledr_s1_agent_rsp_fifo:in_endofpacket
	wire          ledr_s1_agent_rsp_fifo_out_valid;                                                    // ledr_s1_agent_rsp_fifo:out_valid -> ledr_s1_agent:rf_sink_valid
	wire  [110:0] ledr_s1_agent_rsp_fifo_out_data;                                                     // ledr_s1_agent_rsp_fifo:out_data -> ledr_s1_agent:rf_sink_data
	wire          ledr_s1_agent_rsp_fifo_out_ready;                                                    // ledr_s1_agent:rf_sink_ready -> ledr_s1_agent_rsp_fifo:out_ready
	wire          ledr_s1_agent_rsp_fifo_out_startofpacket;                                            // ledr_s1_agent_rsp_fifo:out_startofpacket -> ledr_s1_agent:rf_sink_startofpacket
	wire          ledr_s1_agent_rsp_fifo_out_endofpacket;                                              // ledr_s1_agent_rsp_fifo:out_endofpacket -> ledr_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                               // cmd_mux_001:src_valid -> ledr_s1_agent:cp_valid
	wire  [109:0] cmd_mux_001_src_data;                                                                // cmd_mux_001:src_data -> ledr_s1_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                               // ledr_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [4:0] cmd_mux_001_src_channel;                                                             // cmd_mux_001:src_channel -> ledr_s1_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                       // cmd_mux_001:src_startofpacket -> ledr_s1_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                         // cmd_mux_001:src_endofpacket -> ledr_s1_agent:cp_endofpacket
	wire   [31:0] sw_s1_agent_m0_readdata;                                                             // sw_s1_translator:uav_readdata -> sw_s1_agent:m0_readdata
	wire          sw_s1_agent_m0_waitrequest;                                                          // sw_s1_translator:uav_waitrequest -> sw_s1_agent:m0_waitrequest
	wire          sw_s1_agent_m0_debugaccess;                                                          // sw_s1_agent:m0_debugaccess -> sw_s1_translator:uav_debugaccess
	wire   [31:0] sw_s1_agent_m0_address;                                                              // sw_s1_agent:m0_address -> sw_s1_translator:uav_address
	wire    [3:0] sw_s1_agent_m0_byteenable;                                                           // sw_s1_agent:m0_byteenable -> sw_s1_translator:uav_byteenable
	wire          sw_s1_agent_m0_read;                                                                 // sw_s1_agent:m0_read -> sw_s1_translator:uav_read
	wire          sw_s1_agent_m0_readdatavalid;                                                        // sw_s1_translator:uav_readdatavalid -> sw_s1_agent:m0_readdatavalid
	wire          sw_s1_agent_m0_lock;                                                                 // sw_s1_agent:m0_lock -> sw_s1_translator:uav_lock
	wire   [31:0] sw_s1_agent_m0_writedata;                                                            // sw_s1_agent:m0_writedata -> sw_s1_translator:uav_writedata
	wire          sw_s1_agent_m0_write;                                                                // sw_s1_agent:m0_write -> sw_s1_translator:uav_write
	wire    [2:0] sw_s1_agent_m0_burstcount;                                                           // sw_s1_agent:m0_burstcount -> sw_s1_translator:uav_burstcount
	wire          sw_s1_agent_rf_source_valid;                                                         // sw_s1_agent:rf_source_valid -> sw_s1_agent_rsp_fifo:in_valid
	wire  [110:0] sw_s1_agent_rf_source_data;                                                          // sw_s1_agent:rf_source_data -> sw_s1_agent_rsp_fifo:in_data
	wire          sw_s1_agent_rf_source_ready;                                                         // sw_s1_agent_rsp_fifo:in_ready -> sw_s1_agent:rf_source_ready
	wire          sw_s1_agent_rf_source_startofpacket;                                                 // sw_s1_agent:rf_source_startofpacket -> sw_s1_agent_rsp_fifo:in_startofpacket
	wire          sw_s1_agent_rf_source_endofpacket;                                                   // sw_s1_agent:rf_source_endofpacket -> sw_s1_agent_rsp_fifo:in_endofpacket
	wire          sw_s1_agent_rsp_fifo_out_valid;                                                      // sw_s1_agent_rsp_fifo:out_valid -> sw_s1_agent:rf_sink_valid
	wire  [110:0] sw_s1_agent_rsp_fifo_out_data;                                                       // sw_s1_agent_rsp_fifo:out_data -> sw_s1_agent:rf_sink_data
	wire          sw_s1_agent_rsp_fifo_out_ready;                                                      // sw_s1_agent:rf_sink_ready -> sw_s1_agent_rsp_fifo:out_ready
	wire          sw_s1_agent_rsp_fifo_out_startofpacket;                                              // sw_s1_agent_rsp_fifo:out_startofpacket -> sw_s1_agent:rf_sink_startofpacket
	wire          sw_s1_agent_rsp_fifo_out_endofpacket;                                                // sw_s1_agent_rsp_fifo:out_endofpacket -> sw_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                               // cmd_mux_002:src_valid -> sw_s1_agent:cp_valid
	wire  [109:0] cmd_mux_002_src_data;                                                                // cmd_mux_002:src_data -> sw_s1_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                               // sw_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [4:0] cmd_mux_002_src_channel;                                                             // cmd_mux_002:src_channel -> sw_s1_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                       // cmd_mux_002:src_startofpacket -> sw_s1_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                         // cmd_mux_002:src_endofpacket -> sw_s1_agent:cp_endofpacket
	wire   [31:0] riscv_text_s1_agent_m0_readdata;                                                     // riscv_text_s1_translator:uav_readdata -> riscv_text_s1_agent:m0_readdata
	wire          riscv_text_s1_agent_m0_waitrequest;                                                  // riscv_text_s1_translator:uav_waitrequest -> riscv_text_s1_agent:m0_waitrequest
	wire          riscv_text_s1_agent_m0_debugaccess;                                                  // riscv_text_s1_agent:m0_debugaccess -> riscv_text_s1_translator:uav_debugaccess
	wire   [31:0] riscv_text_s1_agent_m0_address;                                                      // riscv_text_s1_agent:m0_address -> riscv_text_s1_translator:uav_address
	wire    [3:0] riscv_text_s1_agent_m0_byteenable;                                                   // riscv_text_s1_agent:m0_byteenable -> riscv_text_s1_translator:uav_byteenable
	wire          riscv_text_s1_agent_m0_read;                                                         // riscv_text_s1_agent:m0_read -> riscv_text_s1_translator:uav_read
	wire          riscv_text_s1_agent_m0_readdatavalid;                                                // riscv_text_s1_translator:uav_readdatavalid -> riscv_text_s1_agent:m0_readdatavalid
	wire          riscv_text_s1_agent_m0_lock;                                                         // riscv_text_s1_agent:m0_lock -> riscv_text_s1_translator:uav_lock
	wire   [31:0] riscv_text_s1_agent_m0_writedata;                                                    // riscv_text_s1_agent:m0_writedata -> riscv_text_s1_translator:uav_writedata
	wire          riscv_text_s1_agent_m0_write;                                                        // riscv_text_s1_agent:m0_write -> riscv_text_s1_translator:uav_write
	wire    [2:0] riscv_text_s1_agent_m0_burstcount;                                                   // riscv_text_s1_agent:m0_burstcount -> riscv_text_s1_translator:uav_burstcount
	wire          riscv_text_s1_agent_rf_source_valid;                                                 // riscv_text_s1_agent:rf_source_valid -> riscv_text_s1_agent_rsp_fifo:in_valid
	wire  [110:0] riscv_text_s1_agent_rf_source_data;                                                  // riscv_text_s1_agent:rf_source_data -> riscv_text_s1_agent_rsp_fifo:in_data
	wire          riscv_text_s1_agent_rf_source_ready;                                                 // riscv_text_s1_agent_rsp_fifo:in_ready -> riscv_text_s1_agent:rf_source_ready
	wire          riscv_text_s1_agent_rf_source_startofpacket;                                         // riscv_text_s1_agent:rf_source_startofpacket -> riscv_text_s1_agent_rsp_fifo:in_startofpacket
	wire          riscv_text_s1_agent_rf_source_endofpacket;                                           // riscv_text_s1_agent:rf_source_endofpacket -> riscv_text_s1_agent_rsp_fifo:in_endofpacket
	wire          riscv_text_s1_agent_rsp_fifo_out_valid;                                              // riscv_text_s1_agent_rsp_fifo:out_valid -> riscv_text_s1_agent:rf_sink_valid
	wire  [110:0] riscv_text_s1_agent_rsp_fifo_out_data;                                               // riscv_text_s1_agent_rsp_fifo:out_data -> riscv_text_s1_agent:rf_sink_data
	wire          riscv_text_s1_agent_rsp_fifo_out_ready;                                              // riscv_text_s1_agent:rf_sink_ready -> riscv_text_s1_agent_rsp_fifo:out_ready
	wire          riscv_text_s1_agent_rsp_fifo_out_startofpacket;                                      // riscv_text_s1_agent_rsp_fifo:out_startofpacket -> riscv_text_s1_agent:rf_sink_startofpacket
	wire          riscv_text_s1_agent_rsp_fifo_out_endofpacket;                                        // riscv_text_s1_agent_rsp_fifo:out_endofpacket -> riscv_text_s1_agent:rf_sink_endofpacket
	wire   [31:0] riscv_data_s1_agent_m0_readdata;                                                     // riscv_data_s1_translator:uav_readdata -> riscv_data_s1_agent:m0_readdata
	wire          riscv_data_s1_agent_m0_waitrequest;                                                  // riscv_data_s1_translator:uav_waitrequest -> riscv_data_s1_agent:m0_waitrequest
	wire          riscv_data_s1_agent_m0_debugaccess;                                                  // riscv_data_s1_agent:m0_debugaccess -> riscv_data_s1_translator:uav_debugaccess
	wire   [31:0] riscv_data_s1_agent_m0_address;                                                      // riscv_data_s1_agent:m0_address -> riscv_data_s1_translator:uav_address
	wire    [3:0] riscv_data_s1_agent_m0_byteenable;                                                   // riscv_data_s1_agent:m0_byteenable -> riscv_data_s1_translator:uav_byteenable
	wire          riscv_data_s1_agent_m0_read;                                                         // riscv_data_s1_agent:m0_read -> riscv_data_s1_translator:uav_read
	wire          riscv_data_s1_agent_m0_readdatavalid;                                                // riscv_data_s1_translator:uav_readdatavalid -> riscv_data_s1_agent:m0_readdatavalid
	wire          riscv_data_s1_agent_m0_lock;                                                         // riscv_data_s1_agent:m0_lock -> riscv_data_s1_translator:uav_lock
	wire   [31:0] riscv_data_s1_agent_m0_writedata;                                                    // riscv_data_s1_agent:m0_writedata -> riscv_data_s1_translator:uav_writedata
	wire          riscv_data_s1_agent_m0_write;                                                        // riscv_data_s1_agent:m0_write -> riscv_data_s1_translator:uav_write
	wire    [2:0] riscv_data_s1_agent_m0_burstcount;                                                   // riscv_data_s1_agent:m0_burstcount -> riscv_data_s1_translator:uav_burstcount
	wire          riscv_data_s1_agent_rf_source_valid;                                                 // riscv_data_s1_agent:rf_source_valid -> riscv_data_s1_agent_rsp_fifo:in_valid
	wire  [110:0] riscv_data_s1_agent_rf_source_data;                                                  // riscv_data_s1_agent:rf_source_data -> riscv_data_s1_agent_rsp_fifo:in_data
	wire          riscv_data_s1_agent_rf_source_ready;                                                 // riscv_data_s1_agent_rsp_fifo:in_ready -> riscv_data_s1_agent:rf_source_ready
	wire          riscv_data_s1_agent_rf_source_startofpacket;                                         // riscv_data_s1_agent:rf_source_startofpacket -> riscv_data_s1_agent_rsp_fifo:in_startofpacket
	wire          riscv_data_s1_agent_rf_source_endofpacket;                                           // riscv_data_s1_agent:rf_source_endofpacket -> riscv_data_s1_agent_rsp_fifo:in_endofpacket
	wire          riscv_data_s1_agent_rsp_fifo_out_valid;                                              // riscv_data_s1_agent_rsp_fifo:out_valid -> riscv_data_s1_agent:rf_sink_valid
	wire  [110:0] riscv_data_s1_agent_rsp_fifo_out_data;                                               // riscv_data_s1_agent_rsp_fifo:out_data -> riscv_data_s1_agent:rf_sink_data
	wire          riscv_data_s1_agent_rsp_fifo_out_ready;                                              // riscv_data_s1_agent:rf_sink_ready -> riscv_data_s1_agent_rsp_fifo:out_ready
	wire          riscv_data_s1_agent_rsp_fifo_out_startofpacket;                                      // riscv_data_s1_agent_rsp_fifo:out_startofpacket -> riscv_data_s1_agent:rf_sink_startofpacket
	wire          riscv_data_s1_agent_rsp_fifo_out_endofpacket;                                        // riscv_data_s1_agent_rsp_fifo:out_endofpacket -> riscv_data_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                               // cmd_mux_004:src_valid -> riscv_data_s1_agent:cp_valid
	wire  [109:0] cmd_mux_004_src_data;                                                                // cmd_mux_004:src_data -> riscv_data_s1_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                               // riscv_data_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [4:0] cmd_mux_004_src_channel;                                                             // cmd_mux_004:src_channel -> riscv_data_s1_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                       // cmd_mux_004:src_startofpacket -> riscv_data_s1_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                         // cmd_mux_004:src_endofpacket -> riscv_data_s1_agent:cp_endofpacket
	wire          riscv_simple_sv_0_data_master_agent_cp_valid;                                        // riscv_simple_sv_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [109:0] riscv_simple_sv_0_data_master_agent_cp_data;                                         // riscv_simple_sv_0_data_master_agent:cp_data -> router:sink_data
	wire          riscv_simple_sv_0_data_master_agent_cp_ready;                                        // router:sink_ready -> riscv_simple_sv_0_data_master_agent:cp_ready
	wire          riscv_simple_sv_0_data_master_agent_cp_startofpacket;                                // riscv_simple_sv_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          riscv_simple_sv_0_data_master_agent_cp_endofpacket;                                  // riscv_simple_sv_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          jtag_master_master_agent_cp_valid;                                                   // jtag_master_master_agent:cp_valid -> router_001:sink_valid
	wire  [109:0] jtag_master_master_agent_cp_data;                                                    // jtag_master_master_agent:cp_data -> router_001:sink_data
	wire          jtag_master_master_agent_cp_ready;                                                   // router_001:sink_ready -> jtag_master_master_agent:cp_ready
	wire          jtag_master_master_agent_cp_startofpacket;                                           // jtag_master_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          jtag_master_master_agent_cp_endofpacket;                                             // jtag_master_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          instruction_cache_0_memory_agent_cp_valid;                                           // Instruction_Cache_0_memory_agent:cp_valid -> router_002:sink_valid
	wire  [145:0] instruction_cache_0_memory_agent_cp_data;                                            // Instruction_Cache_0_memory_agent:cp_data -> router_002:sink_data
	wire          instruction_cache_0_memory_agent_cp_ready;                                           // router_002:sink_ready -> Instruction_Cache_0_memory_agent:cp_ready
	wire          instruction_cache_0_memory_agent_cp_startofpacket;                                   // Instruction_Cache_0_memory_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          instruction_cache_0_memory_agent_cp_endofpacket;                                     // Instruction_Cache_0_memory_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [145:0] router_002_src_data;                                                                 // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [4:0] router_002_src_channel;                                                              // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                        // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                          // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          riscv_sdram_s1_agent_rp_valid;                                                       // riscv_sdram_s1_agent:rp_valid -> router_003:sink_valid
	wire   [91:0] riscv_sdram_s1_agent_rp_data;                                                        // riscv_sdram_s1_agent:rp_data -> router_003:sink_data
	wire          riscv_sdram_s1_agent_rp_ready;                                                       // router_003:sink_ready -> riscv_sdram_s1_agent:rp_ready
	wire          riscv_sdram_s1_agent_rp_startofpacket;                                               // riscv_sdram_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          riscv_sdram_s1_agent_rp_endofpacket;                                                 // riscv_sdram_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                // router_003:src_valid -> rsp_demux:sink_valid
	wire   [91:0] router_003_src_data;                                                                 // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                                // rsp_demux:sink_ready -> router_003:src_ready
	wire    [4:0] router_003_src_channel;                                                              // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                        // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                          // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          ledr_s1_agent_rp_valid;                                                              // ledr_s1_agent:rp_valid -> router_004:sink_valid
	wire  [109:0] ledr_s1_agent_rp_data;                                                               // ledr_s1_agent:rp_data -> router_004:sink_data
	wire          ledr_s1_agent_rp_ready;                                                              // router_004:sink_ready -> ledr_s1_agent:rp_ready
	wire          ledr_s1_agent_rp_startofpacket;                                                      // ledr_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          ledr_s1_agent_rp_endofpacket;                                                        // ledr_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [109:0] router_004_src_data;                                                                 // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                                // rsp_demux_001:sink_ready -> router_004:src_ready
	wire    [4:0] router_004_src_channel;                                                              // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                        // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                          // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          sw_s1_agent_rp_valid;                                                                // sw_s1_agent:rp_valid -> router_005:sink_valid
	wire  [109:0] sw_s1_agent_rp_data;                                                                 // sw_s1_agent:rp_data -> router_005:sink_data
	wire          sw_s1_agent_rp_ready;                                                                // router_005:sink_ready -> sw_s1_agent:rp_ready
	wire          sw_s1_agent_rp_startofpacket;                                                        // sw_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sw_s1_agent_rp_endofpacket;                                                          // sw_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [109:0] router_005_src_data;                                                                 // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                                // rsp_demux_002:sink_ready -> router_005:src_ready
	wire    [4:0] router_005_src_channel;                                                              // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                        // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                          // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          riscv_text_s1_agent_rp_valid;                                                        // riscv_text_s1_agent:rp_valid -> router_006:sink_valid
	wire  [109:0] riscv_text_s1_agent_rp_data;                                                         // riscv_text_s1_agent:rp_data -> router_006:sink_data
	wire          riscv_text_s1_agent_rp_ready;                                                        // router_006:sink_ready -> riscv_text_s1_agent:rp_ready
	wire          riscv_text_s1_agent_rp_startofpacket;                                                // riscv_text_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          riscv_text_s1_agent_rp_endofpacket;                                                  // riscv_text_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [109:0] router_006_src_data;                                                                 // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                                // rsp_demux_003:sink_ready -> router_006:src_ready
	wire    [4:0] router_006_src_channel;                                                              // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                                        // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                          // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          riscv_data_s1_agent_rp_valid;                                                        // riscv_data_s1_agent:rp_valid -> router_007:sink_valid
	wire  [109:0] riscv_data_s1_agent_rp_data;                                                         // riscv_data_s1_agent:rp_data -> router_007:sink_data
	wire          riscv_data_s1_agent_rp_ready;                                                        // router_007:sink_ready -> riscv_data_s1_agent:rp_ready
	wire          riscv_data_s1_agent_rp_startofpacket;                                                // riscv_data_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          riscv_data_s1_agent_rp_endofpacket;                                                  // riscv_data_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [109:0] router_007_src_data;                                                                 // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                                // rsp_demux_004:sink_ready -> router_007:src_ready
	wire    [4:0] router_007_src_channel;                                                              // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                                        // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                          // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_src_valid;                                                                    // router:src_valid -> riscv_simple_sv_0_data_master_limiter:cmd_sink_valid
	wire  [109:0] router_src_data;                                                                     // router:src_data -> riscv_simple_sv_0_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                    // riscv_simple_sv_0_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [4:0] router_src_channel;                                                                  // router:src_channel -> riscv_simple_sv_0_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                            // router:src_startofpacket -> riscv_simple_sv_0_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                              // router:src_endofpacket -> riscv_simple_sv_0_data_master_limiter:cmd_sink_endofpacket
	wire  [109:0] riscv_simple_sv_0_data_master_limiter_cmd_src_data;                                  // riscv_simple_sv_0_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          riscv_simple_sv_0_data_master_limiter_cmd_src_ready;                                 // cmd_demux:sink_ready -> riscv_simple_sv_0_data_master_limiter:cmd_src_ready
	wire    [4:0] riscv_simple_sv_0_data_master_limiter_cmd_src_channel;                               // riscv_simple_sv_0_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          riscv_simple_sv_0_data_master_limiter_cmd_src_startofpacket;                         // riscv_simple_sv_0_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          riscv_simple_sv_0_data_master_limiter_cmd_src_endofpacket;                           // riscv_simple_sv_0_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                   // rsp_mux:src_valid -> riscv_simple_sv_0_data_master_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_src_data;                                                                    // rsp_mux:src_data -> riscv_simple_sv_0_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                   // riscv_simple_sv_0_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [4:0] rsp_mux_src_channel;                                                                 // rsp_mux:src_channel -> riscv_simple_sv_0_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                           // rsp_mux:src_startofpacket -> riscv_simple_sv_0_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                             // rsp_mux:src_endofpacket -> riscv_simple_sv_0_data_master_limiter:rsp_sink_endofpacket
	wire          riscv_simple_sv_0_data_master_limiter_rsp_src_valid;                                 // riscv_simple_sv_0_data_master_limiter:rsp_src_valid -> riscv_simple_sv_0_data_master_agent:rp_valid
	wire  [109:0] riscv_simple_sv_0_data_master_limiter_rsp_src_data;                                  // riscv_simple_sv_0_data_master_limiter:rsp_src_data -> riscv_simple_sv_0_data_master_agent:rp_data
	wire          riscv_simple_sv_0_data_master_limiter_rsp_src_ready;                                 // riscv_simple_sv_0_data_master_agent:rp_ready -> riscv_simple_sv_0_data_master_limiter:rsp_src_ready
	wire    [4:0] riscv_simple_sv_0_data_master_limiter_rsp_src_channel;                               // riscv_simple_sv_0_data_master_limiter:rsp_src_channel -> riscv_simple_sv_0_data_master_agent:rp_channel
	wire          riscv_simple_sv_0_data_master_limiter_rsp_src_startofpacket;                         // riscv_simple_sv_0_data_master_limiter:rsp_src_startofpacket -> riscv_simple_sv_0_data_master_agent:rp_startofpacket
	wire          riscv_simple_sv_0_data_master_limiter_rsp_src_endofpacket;                           // riscv_simple_sv_0_data_master_limiter:rsp_src_endofpacket -> riscv_simple_sv_0_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                                // router_001:src_valid -> jtag_master_master_limiter:cmd_sink_valid
	wire  [109:0] router_001_src_data;                                                                 // router_001:src_data -> jtag_master_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                // jtag_master_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [4:0] router_001_src_channel;                                                              // router_001:src_channel -> jtag_master_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                        // router_001:src_startofpacket -> jtag_master_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                          // router_001:src_endofpacket -> jtag_master_master_limiter:cmd_sink_endofpacket
	wire  [109:0] jtag_master_master_limiter_cmd_src_data;                                             // jtag_master_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          jtag_master_master_limiter_cmd_src_ready;                                            // cmd_demux_001:sink_ready -> jtag_master_master_limiter:cmd_src_ready
	wire    [4:0] jtag_master_master_limiter_cmd_src_channel;                                          // jtag_master_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          jtag_master_master_limiter_cmd_src_startofpacket;                                    // jtag_master_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          jtag_master_master_limiter_cmd_src_endofpacket;                                      // jtag_master_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                               // rsp_mux_001:src_valid -> jtag_master_master_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_001_src_data;                                                                // rsp_mux_001:src_data -> jtag_master_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                               // jtag_master_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [4:0] rsp_mux_001_src_channel;                                                             // rsp_mux_001:src_channel -> jtag_master_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                       // rsp_mux_001:src_startofpacket -> jtag_master_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                         // rsp_mux_001:src_endofpacket -> jtag_master_master_limiter:rsp_sink_endofpacket
	wire          jtag_master_master_limiter_rsp_src_valid;                                            // jtag_master_master_limiter:rsp_src_valid -> jtag_master_master_agent:rp_valid
	wire  [109:0] jtag_master_master_limiter_rsp_src_data;                                             // jtag_master_master_limiter:rsp_src_data -> jtag_master_master_agent:rp_data
	wire          jtag_master_master_limiter_rsp_src_ready;                                            // jtag_master_master_agent:rp_ready -> jtag_master_master_limiter:rsp_src_ready
	wire    [4:0] jtag_master_master_limiter_rsp_src_channel;                                          // jtag_master_master_limiter:rsp_src_channel -> jtag_master_master_agent:rp_channel
	wire          jtag_master_master_limiter_rsp_src_startofpacket;                                    // jtag_master_master_limiter:rsp_src_startofpacket -> jtag_master_master_agent:rp_startofpacket
	wire          jtag_master_master_limiter_rsp_src_endofpacket;                                      // jtag_master_master_limiter:rsp_src_endofpacket -> jtag_master_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                   // cmd_mux:src_valid -> riscv_sdram_s1_burst_adapter:sink0_valid
	wire   [91:0] cmd_mux_src_data;                                                                    // cmd_mux:src_data -> riscv_sdram_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                   // riscv_sdram_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [4:0] cmd_mux_src_channel;                                                                 // cmd_mux:src_channel -> riscv_sdram_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                           // cmd_mux:src_startofpacket -> riscv_sdram_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                             // cmd_mux:src_endofpacket -> riscv_sdram_s1_burst_adapter:sink0_endofpacket
	wire          riscv_sdram_s1_burst_adapter_source0_valid;                                          // riscv_sdram_s1_burst_adapter:source0_valid -> riscv_sdram_s1_agent:cp_valid
	wire   [91:0] riscv_sdram_s1_burst_adapter_source0_data;                                           // riscv_sdram_s1_burst_adapter:source0_data -> riscv_sdram_s1_agent:cp_data
	wire          riscv_sdram_s1_burst_adapter_source0_ready;                                          // riscv_sdram_s1_agent:cp_ready -> riscv_sdram_s1_burst_adapter:source0_ready
	wire    [4:0] riscv_sdram_s1_burst_adapter_source0_channel;                                        // riscv_sdram_s1_burst_adapter:source0_channel -> riscv_sdram_s1_agent:cp_channel
	wire          riscv_sdram_s1_burst_adapter_source0_startofpacket;                                  // riscv_sdram_s1_burst_adapter:source0_startofpacket -> riscv_sdram_s1_agent:cp_startofpacket
	wire          riscv_sdram_s1_burst_adapter_source0_endofpacket;                                    // riscv_sdram_s1_burst_adapter:source0_endofpacket -> riscv_sdram_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                               // cmd_mux_003:src_valid -> riscv_text_s1_burst_adapter:sink0_valid
	wire  [109:0] cmd_mux_003_src_data;                                                                // cmd_mux_003:src_data -> riscv_text_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                               // riscv_text_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [4:0] cmd_mux_003_src_channel;                                                             // cmd_mux_003:src_channel -> riscv_text_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                       // cmd_mux_003:src_startofpacket -> riscv_text_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                         // cmd_mux_003:src_endofpacket -> riscv_text_s1_burst_adapter:sink0_endofpacket
	wire          riscv_text_s1_burst_adapter_source0_valid;                                           // riscv_text_s1_burst_adapter:source0_valid -> riscv_text_s1_agent:cp_valid
	wire  [109:0] riscv_text_s1_burst_adapter_source0_data;                                            // riscv_text_s1_burst_adapter:source0_data -> riscv_text_s1_agent:cp_data
	wire          riscv_text_s1_burst_adapter_source0_ready;                                           // riscv_text_s1_agent:cp_ready -> riscv_text_s1_burst_adapter:source0_ready
	wire    [4:0] riscv_text_s1_burst_adapter_source0_channel;                                         // riscv_text_s1_burst_adapter:source0_channel -> riscv_text_s1_agent:cp_channel
	wire          riscv_text_s1_burst_adapter_source0_startofpacket;                                   // riscv_text_s1_burst_adapter:source0_startofpacket -> riscv_text_s1_agent:cp_startofpacket
	wire          riscv_text_s1_burst_adapter_source0_endofpacket;                                     // riscv_text_s1_burst_adapter:source0_endofpacket -> riscv_text_s1_agent:cp_endofpacket
	wire          cmd_demux_src1_valid;                                                                // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [109:0] cmd_demux_src1_data;                                                                 // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [4:0] cmd_demux_src1_channel;                                                              // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                        // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                          // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [109:0] cmd_demux_src2_data;                                                                 // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [4:0] cmd_demux_src2_channel;                                                              // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                        // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                          // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                            // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [109:0] cmd_demux_001_src1_data;                                                             // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                            // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [4:0] cmd_demux_001_src1_channel;                                                          // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                    // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                      // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                            // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [109:0] cmd_demux_001_src2_data;                                                             // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                            // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [4:0] cmd_demux_001_src2_channel;                                                          // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                    // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                      // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                            // cmd_demux_001:src3_valid -> cmd_mux_003:sink0_valid
	wire  [109:0] cmd_demux_001_src3_data;                                                             // cmd_demux_001:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_001_src3_ready;                                                            // cmd_mux_003:sink0_ready -> cmd_demux_001:src3_ready
	wire    [4:0] cmd_demux_001_src3_channel;                                                          // cmd_demux_001:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_001_src3_startofpacket;                                                    // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                      // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                            // cmd_demux_001:src4_valid -> cmd_mux_004:sink0_valid
	wire  [109:0] cmd_demux_001_src4_data;                                                             // cmd_demux_001:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_001_src4_ready;                                                            // cmd_mux_004:sink0_ready -> cmd_demux_001:src4_ready
	wire    [4:0] cmd_demux_001_src4_channel;                                                          // cmd_demux_001:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_001_src4_startofpacket;                                                    // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                      // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                            // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [109:0] rsp_demux_001_src0_data;                                                             // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                            // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [4:0] rsp_demux_001_src0_channel;                                                          // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                    // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                      // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                            // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [109:0] rsp_demux_001_src1_data;                                                             // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                            // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [4:0] rsp_demux_001_src1_channel;                                                          // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                                    // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                      // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                            // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [109:0] rsp_demux_002_src0_data;                                                             // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                            // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [4:0] rsp_demux_002_src0_channel;                                                          // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                    // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                      // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                            // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [109:0] rsp_demux_002_src1_data;                                                             // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                            // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [4:0] rsp_demux_002_src1_channel;                                                          // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                    // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                      // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                            // rsp_demux_003:src0_valid -> rsp_mux_001:sink3_valid
	wire  [109:0] rsp_demux_003_src0_data;                                                             // rsp_demux_003:src0_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src0_ready;                                                            // rsp_mux_001:sink3_ready -> rsp_demux_003:src0_ready
	wire    [4:0] rsp_demux_003_src0_channel;                                                          // rsp_demux_003:src0_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                    // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                      // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                            // rsp_demux_004:src0_valid -> rsp_mux_001:sink4_valid
	wire  [109:0] rsp_demux_004_src0_data;                                                             // rsp_demux_004:src0_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src0_ready;                                                            // rsp_mux_001:sink4_ready -> rsp_demux_004:src0_ready
	wire    [4:0] rsp_demux_004_src0_channel;                                                          // rsp_demux_004:src0_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                    // rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                      // rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          cmd_demux_src0_valid;                                                                // cmd_demux:src0_valid -> riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter:in_valid
	wire  [109:0] cmd_demux_src0_data;                                                                 // cmd_demux:src0_data -> riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src0_ready;                                                                // riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire    [4:0] cmd_demux_src0_channel;                                                              // cmd_demux:src0_channel -> riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_startofpacket;                                                        // cmd_demux:src0_startofpacket -> riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                          // cmd_demux:src0_endofpacket -> riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_valid;         // riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter:out_valid -> cmd_mux:sink0_valid
	wire   [91:0] riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_data;          // riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter:out_data -> cmd_mux:sink0_data
	wire          riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_ready;         // cmd_mux:sink0_ready -> riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter:out_ready
	wire    [4:0] riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_channel;       // riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter:out_channel -> cmd_mux:sink0_channel
	wire          riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_startofpacket; // riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_endofpacket;   // riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                            // cmd_demux_001:src0_valid -> jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter:in_valid
	wire  [109:0] cmd_demux_001_src0_data;                                                             // cmd_demux_001:src0_data -> jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                            // jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire    [4:0] cmd_demux_001_src0_channel;                                                          // cmd_demux_001:src0_channel -> jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                    // cmd_demux_001:src0_startofpacket -> jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                      // cmd_demux_001:src0_endofpacket -> jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter:in_endofpacket
	wire          jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_valid;                    // jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire   [91:0] jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_data;                     // jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_ready;                    // cmd_mux:sink1_ready -> jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter:out_ready
	wire    [4:0] jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_channel;                  // jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_startofpacket;            // jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_endofpacket;              // jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                            // cmd_demux_002:src0_valid -> Instruction_Cache_0_memory_to_riscv_text_s1_cmd_width_adapter:in_valid
	wire  [145:0] cmd_demux_002_src0_data;                                                             // cmd_demux_002:src0_data -> Instruction_Cache_0_memory_to_riscv_text_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                            // Instruction_Cache_0_memory_to_riscv_text_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire    [4:0] cmd_demux_002_src0_channel;                                                          // cmd_demux_002:src0_channel -> Instruction_Cache_0_memory_to_riscv_text_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                    // cmd_demux_002:src0_startofpacket -> Instruction_Cache_0_memory_to_riscv_text_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                      // cmd_demux_002:src0_endofpacket -> Instruction_Cache_0_memory_to_riscv_text_s1_cmd_width_adapter:in_endofpacket
	wire          instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_valid;             // Instruction_Cache_0_memory_to_riscv_text_s1_cmd_width_adapter:out_valid -> cmd_mux_003:sink1_valid
	wire  [109:0] instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_data;              // Instruction_Cache_0_memory_to_riscv_text_s1_cmd_width_adapter:out_data -> cmd_mux_003:sink1_data
	wire          instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_ready;             // cmd_mux_003:sink1_ready -> Instruction_Cache_0_memory_to_riscv_text_s1_cmd_width_adapter:out_ready
	wire    [4:0] instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_channel;           // Instruction_Cache_0_memory_to_riscv_text_s1_cmd_width_adapter:out_channel -> cmd_mux_003:sink1_channel
	wire          instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_startofpacket;     // Instruction_Cache_0_memory_to_riscv_text_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_endofpacket;       // Instruction_Cache_0_memory_to_riscv_text_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                // rsp_demux:src0_valid -> riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter:in_valid
	wire   [91:0] rsp_demux_src0_data;                                                                 // rsp_demux:src0_data -> riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_src0_ready;                                                                // riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire    [4:0] rsp_demux_src0_channel;                                                              // rsp_demux:src0_channel -> riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_startofpacket;                                                        // rsp_demux:src0_startofpacket -> riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                          // rsp_demux:src0_endofpacket -> riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter:in_endofpacket
	wire          riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_valid;         // riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink0_valid
	wire  [109:0] riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_data;          // riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter:out_data -> rsp_mux:sink0_data
	wire          riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_ready;         // rsp_mux:sink0_ready -> riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter:out_ready
	wire    [4:0] riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_channel;       // riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink0_channel
	wire          riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_startofpacket; // riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_endofpacket;   // riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                // rsp_demux:src1_valid -> riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter:in_valid
	wire   [91:0] rsp_demux_src1_data;                                                                 // rsp_demux:src1_data -> riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                                // riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire    [4:0] rsp_demux_src1_channel;                                                              // rsp_demux:src1_channel -> riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                                        // rsp_demux:src1_startofpacket -> riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                          // rsp_demux:src1_endofpacket -> riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter:in_endofpacket
	wire          riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_valid;                    // riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire  [109:0] riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_data;                     // riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_ready;                    // rsp_mux_001:sink0_ready -> riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter:out_ready
	wire    [4:0] riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_channel;                  // riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_startofpacket;            // riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_endofpacket;              // riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_003_src1_valid;                                                            // rsp_demux_003:src1_valid -> riscv_text_s1_to_Instruction_Cache_0_memory_rsp_width_adapter:in_valid
	wire  [109:0] rsp_demux_003_src1_data;                                                             // rsp_demux_003:src1_data -> riscv_text_s1_to_Instruction_Cache_0_memory_rsp_width_adapter:in_data
	wire          rsp_demux_003_src1_ready;                                                            // riscv_text_s1_to_Instruction_Cache_0_memory_rsp_width_adapter:in_ready -> rsp_demux_003:src1_ready
	wire    [4:0] rsp_demux_003_src1_channel;                                                          // rsp_demux_003:src1_channel -> riscv_text_s1_to_Instruction_Cache_0_memory_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                                    // rsp_demux_003:src1_startofpacket -> riscv_text_s1_to_Instruction_Cache_0_memory_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                      // rsp_demux_003:src1_endofpacket -> riscv_text_s1_to_Instruction_Cache_0_memory_rsp_width_adapter:in_endofpacket
	wire          riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_valid;             // riscv_text_s1_to_Instruction_Cache_0_memory_rsp_width_adapter:out_valid -> rsp_mux_002:sink0_valid
	wire  [145:0] riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_data;              // riscv_text_s1_to_Instruction_Cache_0_memory_rsp_width_adapter:out_data -> rsp_mux_002:sink0_data
	wire          riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_ready;             // rsp_mux_002:sink0_ready -> riscv_text_s1_to_Instruction_Cache_0_memory_rsp_width_adapter:out_ready
	wire    [4:0] riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_channel;           // riscv_text_s1_to_Instruction_Cache_0_memory_rsp_width_adapter:out_channel -> rsp_mux_002:sink0_channel
	wire          riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_startofpacket;     // riscv_text_s1_to_Instruction_Cache_0_memory_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_endofpacket;       // riscv_text_s1_to_Instruction_Cache_0_memory_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire    [4:0] riscv_simple_sv_0_data_master_limiter_cmd_valid_data;                                // riscv_simple_sv_0_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [4:0] jtag_master_master_limiter_cmd_valid_data;                                           // jtag_master_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          riscv_sdram_s1_agent_rdata_fifo_out_valid;                                           // riscv_sdram_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] riscv_sdram_s1_agent_rdata_fifo_out_data;                                            // riscv_sdram_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          riscv_sdram_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter:in_0_ready -> riscv_sdram_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                       // avalon_st_adapter:out_0_valid -> riscv_sdram_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                        // avalon_st_adapter:out_0_data -> riscv_sdram_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                       // riscv_sdram_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                       // avalon_st_adapter:out_0_error -> riscv_sdram_s1_agent:rdata_fifo_sink_error
	wire          ledr_s1_agent_rdata_fifo_src_valid;                                                  // ledr_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] ledr_s1_agent_rdata_fifo_src_data;                                                   // ledr_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          ledr_s1_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_001:in_0_ready -> ledr_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                   // avalon_st_adapter_001:out_0_valid -> ledr_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                    // avalon_st_adapter_001:out_0_data -> ledr_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                   // ledr_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                   // avalon_st_adapter_001:out_0_error -> ledr_s1_agent:rdata_fifo_sink_error
	wire          sw_s1_agent_rdata_fifo_src_valid;                                                    // sw_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sw_s1_agent_rdata_fifo_src_data;                                                     // sw_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          sw_s1_agent_rdata_fifo_src_ready;                                                    // avalon_st_adapter_002:in_0_ready -> sw_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                   // avalon_st_adapter_002:out_0_valid -> sw_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                    // avalon_st_adapter_002:out_0_data -> sw_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                   // sw_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                   // avalon_st_adapter_002:out_0_error -> sw_s1_agent:rdata_fifo_sink_error
	wire          riscv_text_s1_agent_rdata_fifo_src_valid;                                            // riscv_text_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] riscv_text_s1_agent_rdata_fifo_src_data;                                             // riscv_text_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          riscv_text_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_003:in_0_ready -> riscv_text_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                   // avalon_st_adapter_003:out_0_valid -> riscv_text_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                    // avalon_st_adapter_003:out_0_data -> riscv_text_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                   // riscv_text_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                   // avalon_st_adapter_003:out_0_error -> riscv_text_s1_agent:rdata_fifo_sink_error
	wire          riscv_data_s1_agent_rdata_fifo_src_valid;                                            // riscv_data_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] riscv_data_s1_agent_rdata_fifo_src_data;                                             // riscv_data_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          riscv_data_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_004:in_0_ready -> riscv_data_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                   // avalon_st_adapter_004:out_0_valid -> riscv_data_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                    // avalon_st_adapter_004:out_0_data -> riscv_data_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                   // riscv_data_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                   // avalon_st_adapter_004:out_0_error -> riscv_data_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) riscv_simple_sv_0_data_master_translator (
		.clk                    (sys_sdram_pll_sys_clk_clk),                                                        //                       clk.clk
		.reset                  (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (riscv_simple_sv_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (riscv_simple_sv_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (riscv_simple_sv_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (riscv_simple_sv_0_data_master_read),                                               //                          .read
		.av_readdata            (riscv_simple_sv_0_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (riscv_simple_sv_0_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (riscv_simple_sv_0_data_master_write),                                              //                          .write
		.av_writedata           (riscv_simple_sv_0_data_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) jtag_master_master_translator (
		.clk                    (sys_sdram_pll_sys_clk_clk),                                             //                       clk.clk
		.reset                  (Instruction_Cache_0_reset_reset_bridge_in_reset_reset),                 //                     reset.reset
		.uav_address            (jtag_master_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (jtag_master_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (jtag_master_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (jtag_master_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (jtag_master_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (jtag_master_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (jtag_master_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (jtag_master_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (jtag_master_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (jtag_master_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (jtag_master_master_byteenable),                                         //                          .byteenable
		.av_read                (jtag_master_master_read),                                               //                          .read
		.av_readdata            (jtag_master_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (jtag_master_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (jtag_master_master_write),                                              //                          .write
		.av_writedata           (jtag_master_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (7),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) instruction_cache_0_memory_translator (
		.clk                    (sys_sdram_pll_sys_clk_clk),                                                     //                       clk.clk
		.reset                  (Instruction_Cache_0_reset_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (instruction_cache_0_memory_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (instruction_cache_0_memory_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (instruction_cache_0_memory_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (instruction_cache_0_memory_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (instruction_cache_0_memory_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (instruction_cache_0_memory_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (instruction_cache_0_memory_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (instruction_cache_0_memory_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (instruction_cache_0_memory_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (instruction_cache_0_memory_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (instruction_cache_0_memory_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Instruction_Cache_0_memory_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Instruction_Cache_0_memory_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (Instruction_Cache_0_memory_burstcount),                                         //                          .burstcount
		.av_read                (Instruction_Cache_0_memory_read),                                               //                          .read
		.av_readdata            (Instruction_Cache_0_memory_readdata),                                           //                          .readdata
		.av_readdatavalid       (Instruction_Cache_0_memory_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable          (8'b11111111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_write               (1'b0),                                                                          //               (terminated)
		.av_writedata           (64'b0000000000000000000000000000000000000000000000000000000000000000),          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) riscv_sdram_s1_translator (
		.clk                    (sys_sdram_pll_sys_clk_clk),                           //                      clk.clk
		.reset                  (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (riscv_sdram_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (riscv_sdram_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (riscv_sdram_s1_agent_m0_read),                        //                         .read
		.uav_write              (riscv_sdram_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (riscv_sdram_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (riscv_sdram_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (riscv_sdram_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (riscv_sdram_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (riscv_sdram_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (riscv_sdram_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (riscv_sdram_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (riscv_sdram_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (riscv_sdram_s1_write),                                //                         .write
		.av_read                (riscv_sdram_s1_read),                                 //                         .read
		.av_readdata            (riscv_sdram_s1_readdata),                             //                         .readdata
		.av_writedata           (riscv_sdram_s1_writedata),                            //                         .writedata
		.av_byteenable          (riscv_sdram_s1_byteenable),                           //                         .byteenable
		.av_readdatavalid       (riscv_sdram_s1_readdatavalid),                        //                         .readdatavalid
		.av_waitrequest         (riscv_sdram_s1_waitrequest),                          //                         .waitrequest
		.av_chipselect          (riscv_sdram_s1_chipselect),                           //                         .chipselect
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ledr_s1_translator (
		.clk                    (sys_sdram_pll_sys_clk_clk),                           //                      clk.clk
		.reset                  (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ledr_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (ledr_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (ledr_s1_agent_m0_read),                               //                         .read
		.uav_write              (ledr_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (ledr_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (ledr_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (ledr_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (ledr_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (ledr_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (ledr_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (ledr_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (ledr_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (ledr_s1_write),                                       //                         .write
		.av_readdata            (ledr_s1_readdata),                                    //                         .readdata
		.av_writedata           (ledr_s1_writedata),                                   //                         .writedata
		.av_chipselect          (ledr_s1_chipselect),                                  //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sw_s1_translator (
		.clk                    (sys_sdram_pll_sys_clk_clk),                             //                      clk.clk
		.reset                  (Instruction_Cache_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sw_s1_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (sw_s1_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (sw_s1_agent_m0_read),                                   //                         .read
		.uav_write              (sw_s1_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (sw_s1_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (sw_s1_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (sw_s1_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (sw_s1_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (sw_s1_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (sw_s1_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (sw_s1_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (sw_s1_address),                                         //      avalon_anti_slave_0.address
		.av_readdata            (sw_s1_readdata),                                        //                         .readdata
		.av_write               (),                                                      //              (terminated)
		.av_read                (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) riscv_text_s1_translator (
		.clk                    (sys_sdram_pll_sys_clk_clk),                           //                      clk.clk
		.reset                  (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (riscv_text_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (riscv_text_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (riscv_text_s1_agent_m0_read),                         //                         .read
		.uav_write              (riscv_text_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (riscv_text_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (riscv_text_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (riscv_text_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (riscv_text_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (riscv_text_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (riscv_text_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (riscv_text_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (riscv_text_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (riscv_text_s1_write),                                 //                         .write
		.av_readdata            (riscv_text_s1_readdata),                              //                         .readdata
		.av_writedata           (riscv_text_s1_writedata),                             //                         .writedata
		.av_byteenable          (riscv_text_s1_byteenable),                            //                         .byteenable
		.av_chipselect          (riscv_text_s1_chipselect),                            //                         .chipselect
		.av_clken               (riscv_text_s1_clken),                                 //                         .clken
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) riscv_data_s1_translator (
		.clk                    (sys_sdram_pll_sys_clk_clk),                           //                      clk.clk
		.reset                  (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (riscv_data_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (riscv_data_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (riscv_data_s1_agent_m0_read),                         //                         .read
		.uav_write              (riscv_data_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (riscv_data_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (riscv_data_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (riscv_data_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (riscv_data_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (riscv_data_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (riscv_data_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (riscv_data_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (riscv_data_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (riscv_data_s1_write),                                 //                         .write
		.av_readdata            (riscv_data_s1_readdata),                              //                         .readdata
		.av_writedata           (riscv_data_s1_writedata),                             //                         .writedata
		.av_byteenable          (riscv_data_s1_byteenable),                            //                         .byteenable
		.av_chipselect          (riscv_data_s1_chipselect),                            //                         .chipselect
		.av_clken               (riscv_data_s1_clken),                                 //                         .clken
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) riscv_simple_sv_0_data_master_agent (
		.clk                   (sys_sdram_pll_sys_clk_clk),                                                        //       clk.clk
		.reset                 (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (riscv_simple_sv_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (riscv_simple_sv_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (riscv_simple_sv_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (riscv_simple_sv_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (riscv_simple_sv_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (riscv_simple_sv_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (riscv_simple_sv_0_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (riscv_simple_sv_0_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (riscv_simple_sv_0_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (riscv_simple_sv_0_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (riscv_simple_sv_0_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (riscv_simple_sv_0_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_master_master_agent (
		.clk                   (sys_sdram_pll_sys_clk_clk),                                             //       clk.clk
		.reset                 (Instruction_Cache_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.av_address            (jtag_master_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (jtag_master_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (jtag_master_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (jtag_master_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (jtag_master_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (jtag_master_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (jtag_master_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (jtag_master_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (jtag_master_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (jtag_master_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (jtag_master_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (jtag_master_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (jtag_master_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (jtag_master_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (jtag_master_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (jtag_master_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (jtag_master_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (jtag_master_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (jtag_master_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (145),
		.PKT_ORI_BURST_SIZE_L      (143),
		.PKT_RESPONSE_STATUS_H     (142),
		.PKT_RESPONSE_STATUS_L     (141),
		.PKT_QOS_H                 (126),
		.PKT_QOS_L                 (126),
		.PKT_DATA_SIDEBAND_H       (124),
		.PKT_DATA_SIDEBAND_L       (124),
		.PKT_ADDR_SIDEBAND_H       (123),
		.PKT_ADDR_SIDEBAND_L       (123),
		.PKT_BURST_TYPE_H          (122),
		.PKT_BURST_TYPE_L          (121),
		.PKT_CACHE_H               (140),
		.PKT_CACHE_L               (137),
		.PKT_THREAD_ID_H           (133),
		.PKT_THREAD_ID_L           (133),
		.PKT_BURST_SIZE_H          (120),
		.PKT_BURST_SIZE_L          (118),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (125),
		.PKT_PROTECTION_H          (136),
		.PKT_PROTECTION_L          (134),
		.PKT_BURSTWRAP_H           (117),
		.PKT_BURSTWRAP_L           (117),
		.PKT_BYTE_CNT_H            (116),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (129),
		.PKT_SRC_ID_L              (127),
		.PKT_DEST_ID_H             (132),
		.PKT_DEST_ID_L             (130),
		.ST_DATA_W                 (146),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (7),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) instruction_cache_0_memory_agent (
		.clk                   (sys_sdram_pll_sys_clk_clk),                                                     //       clk.clk
		.reset                 (Instruction_Cache_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (instruction_cache_0_memory_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (instruction_cache_0_memory_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (instruction_cache_0_memory_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (instruction_cache_0_memory_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (instruction_cache_0_memory_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (instruction_cache_0_memory_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (instruction_cache_0_memory_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (instruction_cache_0_memory_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (instruction_cache_0_memory_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (instruction_cache_0_memory_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (instruction_cache_0_memory_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (instruction_cache_0_memory_agent_cp_valid),                                     //        cp.valid
		.cp_data               (instruction_cache_0_memory_agent_cp_data),                                      //          .data
		.cp_startofpacket      (instruction_cache_0_memory_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (instruction_cache_0_memory_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (instruction_cache_0_memory_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                         //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                          //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                       //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                   //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                         //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (71),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) riscv_sdram_s1_agent (
		.clk                     (sys_sdram_pll_sys_clk_clk),                           //             clk.clk
		.reset                   (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (riscv_sdram_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (riscv_sdram_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (riscv_sdram_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (riscv_sdram_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (riscv_sdram_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (riscv_sdram_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (riscv_sdram_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (riscv_sdram_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (riscv_sdram_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (riscv_sdram_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (riscv_sdram_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (riscv_sdram_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (riscv_sdram_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (riscv_sdram_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (riscv_sdram_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (riscv_sdram_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (riscv_sdram_s1_burst_adapter_source0_ready),          //              cp.ready
		.cp_valid                (riscv_sdram_s1_burst_adapter_source0_valid),          //                .valid
		.cp_data                 (riscv_sdram_s1_burst_adapter_source0_data),           //                .data
		.cp_startofpacket        (riscv_sdram_s1_burst_adapter_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (riscv_sdram_s1_burst_adapter_source0_endofpacket),    //                .endofpacket
		.cp_channel              (riscv_sdram_s1_burst_adapter_source0_channel),        //                .channel
		.rf_sink_ready           (riscv_sdram_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (riscv_sdram_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (riscv_sdram_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (riscv_sdram_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (riscv_sdram_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (riscv_sdram_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (riscv_sdram_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (riscv_sdram_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (riscv_sdram_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (riscv_sdram_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (riscv_sdram_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (riscv_sdram_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (riscv_sdram_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) riscv_sdram_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset             (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (riscv_sdram_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (riscv_sdram_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (riscv_sdram_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (riscv_sdram_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (riscv_sdram_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (riscv_sdram_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (riscv_sdram_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (riscv_sdram_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (riscv_sdram_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (riscv_sdram_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) riscv_sdram_s1_agent_rdata_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset             (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (riscv_sdram_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (riscv_sdram_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (riscv_sdram_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (riscv_sdram_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (riscv_sdram_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (riscv_sdram_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ledr_s1_agent (
		.clk                     (sys_sdram_pll_sys_clk_clk),                           //             clk.clk
		.reset                   (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ledr_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (ledr_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (ledr_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (ledr_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (ledr_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (ledr_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (ledr_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (ledr_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (ledr_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (ledr_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (ledr_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (ledr_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (ledr_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (ledr_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (ledr_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (ledr_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                             //                .channel
		.rf_sink_ready           (ledr_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (ledr_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (ledr_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (ledr_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (ledr_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (ledr_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (ledr_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (ledr_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (ledr_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (ledr_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (ledr_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ledr_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (ledr_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ledr_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset             (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ledr_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (ledr_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (ledr_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (ledr_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (ledr_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (ledr_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (ledr_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (ledr_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (ledr_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (ledr_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sw_s1_agent (
		.clk                     (sys_sdram_pll_sys_clk_clk),                             //             clk.clk
		.reset                   (Instruction_Cache_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sw_s1_agent_m0_address),                                //              m0.address
		.m0_burstcount           (sw_s1_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (sw_s1_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (sw_s1_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (sw_s1_agent_m0_lock),                                   //                .lock
		.m0_readdata             (sw_s1_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (sw_s1_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (sw_s1_agent_m0_read),                                   //                .read
		.m0_waitrequest          (sw_s1_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (sw_s1_agent_m0_writedata),                              //                .writedata
		.m0_write                (sw_s1_agent_m0_write),                                  //                .write
		.rp_endofpacket          (sw_s1_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (sw_s1_agent_rp_ready),                                  //                .ready
		.rp_valid                (sw_s1_agent_rp_valid),                                  //                .valid
		.rp_data                 (sw_s1_agent_rp_data),                                   //                .data
		.rp_startofpacket        (sw_s1_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                               //                .channel
		.rf_sink_ready           (sw_s1_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (sw_s1_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (sw_s1_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (sw_s1_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (sw_s1_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (sw_s1_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (sw_s1_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (sw_s1_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (sw_s1_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (sw_s1_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (sw_s1_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_s1_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (sw_s1_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                             //       clk.clk
		.reset             (Instruction_Cache_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_s1_agent_rf_source_data),                            //        in.data
		.in_valid          (sw_s1_agent_rf_source_valid),                           //          .valid
		.in_ready          (sw_s1_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (sw_s1_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (sw_s1_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (sw_s1_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (sw_s1_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (sw_s1_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (sw_s1_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (sw_s1_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) riscv_text_s1_agent (
		.clk                     (sys_sdram_pll_sys_clk_clk),                           //             clk.clk
		.reset                   (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (riscv_text_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (riscv_text_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (riscv_text_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (riscv_text_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (riscv_text_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (riscv_text_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (riscv_text_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (riscv_text_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (riscv_text_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (riscv_text_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (riscv_text_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (riscv_text_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (riscv_text_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (riscv_text_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (riscv_text_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (riscv_text_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (riscv_text_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (riscv_text_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (riscv_text_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (riscv_text_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (riscv_text_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (riscv_text_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (riscv_text_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (riscv_text_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (riscv_text_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (riscv_text_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (riscv_text_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (riscv_text_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (riscv_text_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (riscv_text_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (riscv_text_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (riscv_text_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (riscv_text_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (riscv_text_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (riscv_text_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) riscv_text_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset             (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (riscv_text_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (riscv_text_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (riscv_text_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (riscv_text_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (riscv_text_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (riscv_text_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (riscv_text_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (riscv_text_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (riscv_text_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (riscv_text_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) riscv_data_s1_agent (
		.clk                     (sys_sdram_pll_sys_clk_clk),                           //             clk.clk
		.reset                   (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (riscv_data_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (riscv_data_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (riscv_data_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (riscv_data_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (riscv_data_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (riscv_data_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (riscv_data_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (riscv_data_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (riscv_data_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (riscv_data_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (riscv_data_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (riscv_data_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (riscv_data_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (riscv_data_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (riscv_data_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (riscv_data_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                             //                .channel
		.rf_sink_ready           (riscv_data_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (riscv_data_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (riscv_data_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (riscv_data_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (riscv_data_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (riscv_data_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (riscv_data_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (riscv_data_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (riscv_data_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (riscv_data_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (riscv_data_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (riscv_data_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (riscv_data_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) riscv_data_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset             (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (riscv_data_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (riscv_data_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (riscv_data_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (riscv_data_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (riscv_data_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (riscv_data_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (riscv_data_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (riscv_data_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (riscv_data_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (riscv_data_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	platform_mm_interconnect_0_router router (
		.sink_ready         (riscv_simple_sv_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (riscv_simple_sv_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (riscv_simple_sv_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (riscv_simple_sv_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (riscv_simple_sv_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_sys_clk_clk),                            //       clk.clk
		.reset              (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                     //       src.ready
		.src_valid          (router_src_valid),                                     //          .valid
		.src_data           (router_src_data),                                      //          .data
		.src_channel        (router_src_channel),                                   //          .channel
		.src_startofpacket  (router_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                //          .endofpacket
	);

	platform_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (jtag_master_master_agent_cp_ready),                     //      sink.ready
		.sink_valid         (jtag_master_master_agent_cp_valid),                     //          .valid
		.sink_data          (jtag_master_master_agent_cp_data),                      //          .data
		.sink_startofpacket (jtag_master_master_agent_cp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (jtag_master_master_agent_cp_endofpacket),               //          .endofpacket
		.clk                (sys_sdram_pll_sys_clk_clk),                             //       clk.clk
		.reset              (Instruction_Cache_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                  //       src.ready
		.src_valid          (router_001_src_valid),                                  //          .valid
		.src_data           (router_001_src_data),                                   //          .data
		.src_channel        (router_001_src_channel),                                //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                             //          .endofpacket
	);

	platform_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (instruction_cache_0_memory_agent_cp_ready),             //      sink.ready
		.sink_valid         (instruction_cache_0_memory_agent_cp_valid),             //          .valid
		.sink_data          (instruction_cache_0_memory_agent_cp_data),              //          .data
		.sink_startofpacket (instruction_cache_0_memory_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (instruction_cache_0_memory_agent_cp_endofpacket),       //          .endofpacket
		.clk                (sys_sdram_pll_sys_clk_clk),                             //       clk.clk
		.reset              (Instruction_Cache_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                  //       src.ready
		.src_valid          (router_002_src_valid),                                  //          .valid
		.src_data           (router_002_src_data),                                   //          .data
		.src_channel        (router_002_src_channel),                                //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                             //          .endofpacket
	);

	platform_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (riscv_sdram_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (riscv_sdram_s1_agent_rp_valid),                       //          .valid
		.sink_data          (riscv_sdram_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (riscv_sdram_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (riscv_sdram_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset              (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                //       src.ready
		.src_valid          (router_003_src_valid),                                //          .valid
		.src_data           (router_003_src_data),                                 //          .data
		.src_channel        (router_003_src_channel),                              //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                           //          .endofpacket
	);

	platform_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (ledr_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (ledr_s1_agent_rp_valid),                              //          .valid
		.sink_data          (ledr_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (ledr_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (ledr_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset              (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                //       src.ready
		.src_valid          (router_004_src_valid),                                //          .valid
		.src_data           (router_004_src_data),                                 //          .data
		.src_channel        (router_004_src_channel),                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                           //          .endofpacket
	);

	platform_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (sw_s1_agent_rp_ready),                                  //      sink.ready
		.sink_valid         (sw_s1_agent_rp_valid),                                  //          .valid
		.sink_data          (sw_s1_agent_rp_data),                                   //          .data
		.sink_startofpacket (sw_s1_agent_rp_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (sw_s1_agent_rp_endofpacket),                            //          .endofpacket
		.clk                (sys_sdram_pll_sys_clk_clk),                             //       clk.clk
		.reset              (Instruction_Cache_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                  //       src.ready
		.src_valid          (router_005_src_valid),                                  //          .valid
		.src_data           (router_005_src_data),                                   //          .data
		.src_channel        (router_005_src_channel),                                //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                             //          .endofpacket
	);

	platform_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (riscv_text_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (riscv_text_s1_agent_rp_valid),                        //          .valid
		.sink_data          (riscv_text_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (riscv_text_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (riscv_text_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset              (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                //       src.ready
		.src_valid          (router_006_src_valid),                                //          .valid
		.src_data           (router_006_src_data),                                 //          .data
		.src_channel        (router_006_src_channel),                              //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                           //          .endofpacket
	);

	platform_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (riscv_data_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (riscv_data_s1_agent_rp_valid),                        //          .valid
		.sink_data          (riscv_data_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (riscv_data_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (riscv_data_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset              (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                //       src.ready
		.src_valid          (router_007_src_valid),                                //          .valid
		.src_data           (router_007_src_data),                                 //          .data
		.src_channel        (router_007_src_channel),                              //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                           //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (94),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (91),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) riscv_simple_sv_0_data_master_limiter (
		.clk                    (sys_sdram_pll_sys_clk_clk),                                   //       clk.clk
		.reset                  (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                            //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                            //          .valid
		.cmd_sink_data          (router_src_data),                                             //          .data
		.cmd_sink_channel       (router_src_channel),                                          //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                    //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                      //          .endofpacket
		.cmd_src_ready          (riscv_simple_sv_0_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (riscv_simple_sv_0_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (riscv_simple_sv_0_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (riscv_simple_sv_0_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (riscv_simple_sv_0_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                           //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                           //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                         //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                            //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                   //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                     //          .endofpacket
		.rsp_src_ready          (riscv_simple_sv_0_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (riscv_simple_sv_0_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (riscv_simple_sv_0_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (riscv_simple_sv_0_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (riscv_simple_sv_0_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (riscv_simple_sv_0_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (riscv_simple_sv_0_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (94),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (91),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) jtag_master_master_limiter (
		.clk                    (sys_sdram_pll_sys_clk_clk),                             //       clk.clk
		.reset                  (Instruction_Cache_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                  //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                  //          .valid
		.cmd_sink_data          (router_001_src_data),                                   //          .data
		.cmd_sink_channel       (router_001_src_channel),                                //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                          //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                            //          .endofpacket
		.cmd_src_ready          (jtag_master_master_limiter_cmd_src_ready),              //   cmd_src.ready
		.cmd_src_data           (jtag_master_master_limiter_cmd_src_data),               //          .data
		.cmd_src_channel        (jtag_master_master_limiter_cmd_src_channel),            //          .channel
		.cmd_src_startofpacket  (jtag_master_master_limiter_cmd_src_startofpacket),      //          .startofpacket
		.cmd_src_endofpacket    (jtag_master_master_limiter_cmd_src_endofpacket),        //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                 //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                 //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                               //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                  //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                         //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                           //          .endofpacket
		.rsp_src_ready          (jtag_master_master_limiter_rsp_src_ready),              //   rsp_src.ready
		.rsp_src_valid          (jtag_master_master_limiter_rsp_src_valid),              //          .valid
		.rsp_src_data           (jtag_master_master_limiter_rsp_src_data),               //          .data
		.rsp_src_channel        (jtag_master_master_limiter_rsp_src_channel),            //          .channel
		.rsp_src_startofpacket  (jtag_master_master_limiter_rsp_src_startofpacket),      //          .startofpacket
		.rsp_src_endofpacket    (jtag_master_master_limiter_rsp_src_endofpacket),        //          .endofpacket
		.cmd_src_valid          (jtag_master_master_limiter_cmd_valid_data)              // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (71),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_BURST_TYPE_H          (68),
		.PKT_BURST_TYPE_L          (67),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (63),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) riscv_sdram_s1_burst_adapter (
		.clk                   (sys_sdram_pll_sys_clk_clk),                           //       cr0.clk
		.reset                 (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                   //          .ready
		.source0_valid         (riscv_sdram_s1_burst_adapter_source0_valid),          //   source0.valid
		.source0_data          (riscv_sdram_s1_burst_adapter_source0_data),           //          .data
		.source0_channel       (riscv_sdram_s1_burst_adapter_source0_channel),        //          .channel
		.source0_startofpacket (riscv_sdram_s1_burst_adapter_source0_startofpacket),  //          .startofpacket
		.source0_endofpacket   (riscv_sdram_s1_burst_adapter_source0_endofpacket),    //          .endofpacket
		.source0_ready         (riscv_sdram_s1_burst_adapter_source0_ready)           //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (81),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) riscv_text_s1_burst_adapter (
		.clk                   (sys_sdram_pll_sys_clk_clk),                           //       cr0.clk
		.reset                 (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                               //          .ready
		.source0_valid         (riscv_text_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (riscv_text_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (riscv_text_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (riscv_text_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (riscv_text_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (riscv_text_s1_burst_adapter_source0_ready)            //          .ready
	);

	platform_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (sys_sdram_pll_sys_clk_clk),                                   //        clk.clk
		.reset              (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (riscv_simple_sv_0_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (riscv_simple_sv_0_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (riscv_simple_sv_0_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (riscv_simple_sv_0_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (riscv_simple_sv_0_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (riscv_simple_sv_0_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                        //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                        //           .valid
		.src0_data          (cmd_demux_src0_data),                                         //           .data
		.src0_channel       (cmd_demux_src0_channel),                                      //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                  //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                        //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                        //           .valid
		.src1_data          (cmd_demux_src1_data),                                         //           .data
		.src1_channel       (cmd_demux_src1_channel),                                      //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                  //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                        //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                        //           .valid
		.src2_data          (cmd_demux_src2_data),                                         //           .data
		.src2_channel       (cmd_demux_src2_channel),                                      //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)                                   //           .endofpacket
	);

	platform_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (sys_sdram_pll_sys_clk_clk),                             //        clk.clk
		.reset              (Instruction_Cache_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (jtag_master_master_limiter_cmd_src_ready),              //       sink.ready
		.sink_channel       (jtag_master_master_limiter_cmd_src_channel),            //           .channel
		.sink_data          (jtag_master_master_limiter_cmd_src_data),               //           .data
		.sink_startofpacket (jtag_master_master_limiter_cmd_src_startofpacket),      //           .startofpacket
		.sink_endofpacket   (jtag_master_master_limiter_cmd_src_endofpacket),        //           .endofpacket
		.sink_valid         (jtag_master_master_limiter_cmd_valid_data),             // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                              //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                              //           .valid
		.src0_data          (cmd_demux_001_src0_data),                               //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                            //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                      //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                        //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                              //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                              //           .valid
		.src1_data          (cmd_demux_001_src1_data),                               //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                            //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                      //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                        //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                              //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                              //           .valid
		.src2_data          (cmd_demux_001_src2_data),                               //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                            //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                      //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                        //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                              //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                              //           .valid
		.src3_data          (cmd_demux_001_src3_data),                               //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                            //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                      //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                        //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                              //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                              //           .valid
		.src4_data          (cmd_demux_001_src4_data),                               //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                            //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                      //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)                         //           .endofpacket
	);

	platform_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (sys_sdram_pll_sys_clk_clk),                             //       clk.clk
		.reset              (Instruction_Cache_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                  //      sink.ready
		.sink_channel       (router_002_src_channel),                                //          .channel
		.sink_data          (router_002_src_data),                                   //          .data
		.sink_startofpacket (router_002_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_002_src_valid),                                  //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                              //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                              //          .valid
		.src0_data          (cmd_demux_002_src0_data),                               //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                            //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                         //          .endofpacket
	);

	platform_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (sys_sdram_pll_sys_clk_clk),                                                           //       clk.clk
		.reset               (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                   //          .valid
		.src_data            (cmd_mux_src_data),                                                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                             //          .endofpacket
		.sink0_ready         (riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_ready),                    //     sink1.ready
		.sink1_valid         (jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_valid),                    //          .valid
		.sink1_channel       (jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_channel),                  //          .channel
		.sink1_data          (jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_data),                     //          .data
		.sink1_startofpacket (jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_endofpacket)               //          .endofpacket
	);

	platform_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset               (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                               //          .valid
		.src_data            (cmd_mux_001_src_data),                                //          .data
		.src_channel         (cmd_mux_001_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                              //          .channel
		.sink0_data          (cmd_demux_src1_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                          //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                            //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                          //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                             //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                       //          .endofpacket
	);

	platform_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (sys_sdram_pll_sys_clk_clk),                             //       clk.clk
		.reset               (Instruction_Cache_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                 //          .valid
		.src_data            (cmd_mux_002_src_data),                                  //          .data
		.src_channel         (cmd_mux_002_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                //          .channel
		.sink0_data          (cmd_demux_src2_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                         //          .endofpacket
	);

	platform_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (sys_sdram_pll_sys_clk_clk),                                                       //       clk.clk
		.reset               (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                           //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                           //          .valid
		.src_data            (cmd_mux_003_src_data),                                                            //          .data
		.src_channel         (cmd_mux_003_src_channel),                                                         //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                                     //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                                                        //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                                                        //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),                                                      //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                                                         //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),                                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket),                                                  //          .endofpacket
		.sink1_ready         (instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	platform_mm_interconnect_0_cmd_mux_004 cmd_mux_004 (
		.clk                 (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset               (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                               //          .valid
		.src_data            (cmd_mux_004_src_data),                                //          .data
		.src_channel         (cmd_mux_004_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                            //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),                          //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                             //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket)                       //          .endofpacket
	);

	platform_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset              (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                //      sink.ready
		.sink_channel       (router_003_src_channel),                              //          .channel
		.sink_data          (router_003_src_data),                                 //          .data
		.sink_startofpacket (router_003_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_003_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                           //          .endofpacket
	);

	platform_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset              (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                //      sink.ready
		.sink_channel       (router_004_src_channel),                              //          .channel
		.sink_data          (router_004_src_data),                                 //          .data
		.sink_startofpacket (router_004_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_004_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_001_src0_data),                             //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_001_src1_data),                             //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                       //          .endofpacket
	);

	platform_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (sys_sdram_pll_sys_clk_clk),                             //       clk.clk
		.reset              (Instruction_Cache_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                  //      sink.ready
		.sink_channel       (router_005_src_channel),                                //          .channel
		.sink_data          (router_005_src_data),                                   //          .data
		.sink_startofpacket (router_005_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_005_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_002_src0_data),                               //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_002_src1_data),                               //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                         //          .endofpacket
	);

	platform_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset              (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                //      sink.ready
		.sink_channel       (router_006_src_channel),                              //          .channel
		.sink_data          (router_006_src_data),                                 //          .data
		.sink_startofpacket (router_006_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_006_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_003_src0_data),                             //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_003_src1_data),                             //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                       //          .endofpacket
	);

	platform_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (sys_sdram_pll_sys_clk_clk),                           //       clk.clk
		.reset              (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                //      sink.ready
		.sink_channel       (router_007_src_channel),                              //          .channel
		.sink_data          (router_007_src_data),                                 //          .data
		.sink_startofpacket (router_007_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_007_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_004_src0_data),                             //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                       //          .endofpacket
	);

	platform_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (sys_sdram_pll_sys_clk_clk),                                                           //       clk.clk
		.reset               (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                   //          .valid
		.src_data            (rsp_mux_src_data),                                                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                             //          .endofpacket
		.sink0_ready         (riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                                            //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                                          //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                                            //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                                          //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket)                                                       //          .endofpacket
	);

	platform_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (sys_sdram_pll_sys_clk_clk),                                                //       clk.clk
		.reset               (Instruction_Cache_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                    //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                    //          .valid
		.src_data            (rsp_mux_001_src_data),                                                     //          .data
		.src_channel         (rsp_mux_001_src_channel),                                                  //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                                 //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                                 //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                               //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                                  //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                                           //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                                 //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                                 //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                               //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                                  //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                                           //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                                 //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                                 //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                               //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                                  //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                           //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                                 //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                                 //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                               //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                                  //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket)                                            //          .endofpacket
	);

	platform_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (sys_sdram_pll_sys_clk_clk),                                                       //       clk.clk
		.reset               (Instruction_Cache_0_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                           //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                           //          .valid
		.src_data            (rsp_mux_002_src_data),                                                            //          .data
		.src_channel         (rsp_mux_002_src_channel),                                                         //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                                   //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                                     //          .endofpacket
		.sink0_ready         (riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (80),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (81),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (66),
		.OUT_PKT_BURST_SIZE_L          (64),
		.OUT_PKT_RESPONSE_STATUS_H     (88),
		.OUT_PKT_RESPONSE_STATUS_L     (87),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (68),
		.OUT_PKT_BURST_TYPE_L          (67),
		.OUT_PKT_ORI_BURST_SIZE_L      (89),
		.OUT_PKT_ORI_BURST_SIZE_H      (91),
		.OUT_ST_DATA_W                 (92),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter (
		.clk                  (sys_sdram_pll_sys_clk_clk),                                                           //       clk.clk
		.reset                (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                                //      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                              //          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                          //          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                                //          .ready
		.in_data              (cmd_demux_src0_data),                                                                 //          .data
		.out_endofpacket      (riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (riscv_simple_sv_0_data_master_to_riscv_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (80),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (81),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (66),
		.OUT_PKT_BURST_SIZE_L          (64),
		.OUT_PKT_RESPONSE_STATUS_H     (88),
		.OUT_PKT_RESPONSE_STATUS_L     (87),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (68),
		.OUT_PKT_BURST_TYPE_L          (67),
		.OUT_PKT_ORI_BURST_SIZE_L      (89),
		.OUT_PKT_ORI_BURST_SIZE_H      (91),
		.OUT_ST_DATA_W                 (92),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter (
		.clk                  (sys_sdram_pll_sys_clk_clk),                                                //       clk.clk
		.reset                (Instruction_Cache_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                 //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                               //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                 //          .ready
		.in_data              (cmd_demux_001_src0_data),                                                  //          .data
		.out_endofpacket      (jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (jtag_master_master_to_riscv_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (116),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (117),
		.IN_PKT_BURSTWRAP_L            (117),
		.IN_PKT_BURST_SIZE_H           (120),
		.IN_PKT_BURST_SIZE_L           (118),
		.IN_PKT_RESPONSE_STATUS_H      (142),
		.IN_PKT_RESPONSE_STATUS_L      (141),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (122),
		.IN_PKT_BURST_TYPE_L           (121),
		.IN_PKT_ORI_BURST_SIZE_L       (143),
		.IN_PKT_ORI_BURST_SIZE_H       (145),
		.IN_ST_DATA_W                  (146),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (80),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter (
		.clk                  (sys_sdram_pll_sys_clk_clk),                                                       //       clk.clk
		.reset                (Instruction_Cache_0_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                                        //      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                                      //          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                                //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                                  //          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                                        //          .ready
		.in_data              (cmd_demux_002_src0_data),                                                         //          .data
		.out_endofpacket      (instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (instruction_cache_0_memory_to_riscv_text_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (63),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (66),
		.IN_PKT_BURST_SIZE_L           (64),
		.IN_PKT_RESPONSE_STATUS_H      (88),
		.IN_PKT_RESPONSE_STATUS_L      (87),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (68),
		.IN_PKT_BURST_TYPE_L           (67),
		.IN_PKT_ORI_BURST_SIZE_L       (89),
		.IN_PKT_ORI_BURST_SIZE_H       (91),
		.IN_ST_DATA_W                  (92),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (80),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter (
		.clk                  (sys_sdram_pll_sys_clk_clk),                                                           //       clk.clk
		.reset                (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                                //      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                              //          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                                        //          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                          //          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                                //          .ready
		.in_data              (rsp_demux_src0_data),                                                                 //          .data
		.out_endofpacket      (riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (riscv_sdram_s1_to_riscv_simple_sv_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (63),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (66),
		.IN_PKT_BURST_SIZE_L           (64),
		.IN_PKT_RESPONSE_STATUS_H      (88),
		.IN_PKT_RESPONSE_STATUS_L      (87),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (68),
		.IN_PKT_BURST_TYPE_L           (67),
		.IN_PKT_ORI_BURST_SIZE_L       (89),
		.IN_PKT_ORI_BURST_SIZE_H       (91),
		.IN_ST_DATA_W                  (92),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (80),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter (
		.clk                  (sys_sdram_pll_sys_clk_clk),                                                //       clk.clk
		.reset                (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                     //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                   //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                               //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                     //          .ready
		.in_data              (rsp_demux_src1_data),                                                      //          .data
		.out_endofpacket      (riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (riscv_sdram_s1_to_jtag_master_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (80),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (81),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (116),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (120),
		.OUT_PKT_BURST_SIZE_L          (118),
		.OUT_PKT_RESPONSE_STATUS_H     (142),
		.OUT_PKT_RESPONSE_STATUS_L     (141),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (122),
		.OUT_PKT_BURST_TYPE_L          (121),
		.OUT_PKT_ORI_BURST_SIZE_L      (143),
		.OUT_PKT_ORI_BURST_SIZE_H      (145),
		.OUT_ST_DATA_W                 (146),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter (
		.clk                  (sys_sdram_pll_sys_clk_clk),                                                       //       clk.clk
		.reset                (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_valid             (rsp_demux_003_src1_valid),                                                        //      sink.valid
		.in_channel           (rsp_demux_003_src1_channel),                                                      //          .channel
		.in_startofpacket     (rsp_demux_003_src1_startofpacket),                                                //          .startofpacket
		.in_endofpacket       (rsp_demux_003_src1_endofpacket),                                                  //          .endofpacket
		.in_ready             (rsp_demux_003_src1_ready),                                                        //          .ready
		.in_data              (rsp_demux_003_src1_data),                                                         //          .data
		.out_endofpacket      (riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_data),          //          .data
		.out_channel          (riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (riscv_text_s1_to_instruction_cache_0_memory_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                           // (terminated)
	);

	platform_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (sys_sdram_pll_sys_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (riscv_sdram_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (riscv_sdram_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (riscv_sdram_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                        //         .error
	);

	platform_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (sys_sdram_pll_sys_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ledr_s1_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (ledr_s1_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (ledr_s1_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                    //         .error
	);

	platform_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (sys_sdram_pll_sys_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (Instruction_Cache_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sw_s1_agent_rdata_fifo_src_data),                       //     in_0.data
		.in_0_valid     (sw_s1_agent_rdata_fifo_src_valid),                      //         .valid
		.in_0_ready     (sw_s1_agent_rdata_fifo_src_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                      //         .error
	);

	platform_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (sys_sdram_pll_sys_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (riscv_text_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (riscv_text_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (riscv_text_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                    //         .error
	);

	platform_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (sys_sdram_pll_sys_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (riscv_simple_sv_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (riscv_data_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (riscv_data_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (riscv_data_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                    //         .error
	);

endmodule
