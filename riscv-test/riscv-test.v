
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module riscv_test(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

	wire DRAM_DQM;
	wire RESET;

//=======================================================
//  Structural coding
//=======================================================

	assign DRAM_LDQM = DRAM_DQM;
	assign DRAM_UDQM = DRAM_DQM;
	
	assign RESET = ~KEY[0];

	platform u0 (
		.clk_clk          (CLOCK_50),   //        clk.clk
		.reset_reset      (RESET),      //      reset.reset
		.sdram_wire_addr  (DRAM_ADDR),  // sdram_wire.addr
		.sdram_wire_ba    (DRAM_BA),    //           .ba
		.sdram_wire_cas_n (DRAM_CAS_N), //           .cas_n
		.sdram_wire_cke   (DRAM_CKE),   //           .cke
		.sdram_wire_cs_n  (DRAM_CS_N),  //           .cs_n
		.sdram_wire_dq    (DRAM_DQ),    //           .dq
		.sdram_wire_dqm   (DRAM_DQM),   //           .dqm
		.sdram_wire_ras_n (DRAM_RAS_N), //           .ras_n
		.sdram_wire_we_n  (DRAM_WE_N),  //           .we_n
		.sw_export        (SW),         //         sw.export
		.ledr_export      (LEDR),       //       ledr.export
		.sdram_clk_clk    (DRAM_CLK)    //  sdram_clk.clk
	);


endmodule
